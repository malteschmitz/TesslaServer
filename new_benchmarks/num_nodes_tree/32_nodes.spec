define num_events: Signal<Int> := literal(10000)

define add_calls: Events<Unit> := function_calls("add")

define add_call_sum: Signal<Int> := eventCount(add_calls)

define a_0: Signal<Int> := signalAbs(add_call_sum)
define a_1: Signal<Int> := signalAbs(add_call_sum)
define b_0: Signal<Int> := signalAbs(a_0)
define b_1: Signal<Int> := signalAbs(a_0)
define b_2: Signal<Int> := signalAbs(a_1)
define b_3: Signal<Int> := signalAbs(a_1)
define c_0: Signal<Int> := signalAbs(b_0)
define c_1: Signal<Int> := signalAbs(b_0)
define c_2: Signal<Int> := signalAbs(b_1)
define c_3: Signal<Int> := signalAbs(b_1)
define c_4: Signal<Int> := signalAbs(b_2)
define c_5: Signal<Int> := signalAbs(b_2)
define c_6: Signal<Int> := signalAbs(b_3)
define c_7: Signal<Int> := signalAbs(b_3)
define o_0: Signal<Boolean> := eq(c_0,c_1)
define o_1: Signal<Boolean> := eq(c_2,c_3)
define o_2: Signal<Boolean> := eq(c_4,c_5)
define o_3: Signal<Boolean> := eq(c_6,c_7)
define o_4: Signal<Boolean> := eq(c_0,c_1)
define o_5: Signal<Boolean> := eq(c_2,c_3)
define o_6: Signal<Boolean> := eq(c_4,c_5)
define o_7: Signal<Boolean> := eq(c_6,c_7)
define s_0: Signal<Boolean> := eq(o_0, o_1)
define s_1: Signal<Boolean> := eq(o_2, o_3)
define s_2: Signal<Boolean> := eq(o_4, o_5)
define s_3: Signal<Boolean> := eq(o_6, o_7)
define t_0: Signal<Boolean> := eq(s_0, s_1)
define t_1: Signal<Boolean> := eq(s_2, s_3)
define z: Signal<Boolean> := eq(t_0, t_1)

define finished: Signal<Boolean> := and(z, eq(add_call_sum, num_events))
