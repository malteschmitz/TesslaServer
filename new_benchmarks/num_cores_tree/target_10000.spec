define num_events: Signal<Int> := literal(10000)

define add_calls: Events<Unit> := function_calls("add")

define add_call_sum: Signal<Int> := eventCount(add_calls)

define overhead_0: Signal<Int> := signalAbs(add_call_sum)
define overhead_1: Signal<Int> := signalAbs(add_call_sum)
define overhead_2: Signal<Int> := signalAbs(overhead_0)
define overhead_3: Signal<Int> := signalAbs(overhead_0)
define overhead_4: Signal<Int> := signalAbs(overhead_1)
define overhead_5: Signal<Int> := signalAbs(overhead_1)
define overhead_6: Signal<Int> := signalAbs(overhead_2)
define overhead_7: Signal<Int> := signalAbs(overhead_2)
define overhead_8: Signal<Int> := signalAbs(overhead_3)
define overhead_9: Signal<Int> := signalAbs(overhead_3)
define overhead_10: Signal<Int> := signalAbs(overhead_4)
define overhead_11: Signal<Int> := signalAbs(overhead_4)
define overhead_12: Signal<Int> := signalAbs(overhead_5)
define overhead_13: Signal<Int> := signalAbs(overhead_5)
define m_0: Signal<Int> := signalAbs(overhead_6)
define m_1: Signal<Int> := signalAbs(overhead_6)
define m_2: Signal<Int> := signalAbs(overhead_7)
define m_3: Signal<Int> := signalAbs(overhead_7)
define m_4: Signal<Int> := signalAbs(overhead_8)
define m_5: Signal<Int> := signalAbs(overhead_8)
define m_6: Signal<Int> := signalAbs(overhead_9)
define m_7: Signal<Int> := signalAbs(overhead_9)
define m_8: Signal<Int> := signalAbs(overhead_10)
define m_9: Signal<Int> := signalAbs(overhead_10)
define m_10: Signal<Int> := signalAbs(overhead_11)
define m_11: Signal<Int> := signalAbs(overhead_11)
define m_12: Signal<Int> := signalAbs(overhead_12)
define m_13: Signal<Int> := signalAbs(overhead_12)
define m_14: Signal<Int> := signalAbs(overhead_13)
define m_15: Signal<Int> := signalAbs(overhead_13)
define o_0: Signal<Boolean> := eq(m_0, m_1)
define o_1: Signal<Boolean> := eq(m_2, m_3)
define o_2: Signal<Boolean> := eq(m_4, m_5)
define o_3: Signal<Boolean> := eq(m_6, m_7)
define o_4: Signal<Boolean> := eq(m_8, m_9)
define o_5: Signal<Boolean> := eq(m_10, m_11)
define o_6: Signal<Boolean> := eq(m_12, m_13)
define o_7: Signal<Boolean> := eq(m_14, m_15)
define s_0: Signal<Boolean> := eq(o_0, o_1)
define s_1: Signal<Boolean> := eq(o_2, o_3)
define s_2: Signal<Boolean> := eq(o_4, o_5)
define s_3: Signal<Boolean> := eq(o_6, o_7)
define t_0: Signal<Boolean> := eq(s_0, s_1)
define t_1: Signal<Boolean> := eq(s_2, s_3)
define z: Signal<Boolean> := eq(t_0, t_1)

define finished: Signal<Boolean> := and(z, eq(add_call_sum, num_events))
